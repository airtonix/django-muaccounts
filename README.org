# -*- org -*-
#+TITLE:     Django Multi-User Accounts
#+AUTHOR:    Maciej Pasternacki
#+EMAIL:     maciej@pasternacki.net
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil tags:not-in-toc

Django-muaccounts is an application for multi-user accounts within
a Django project, accessible on separate domains, to use
in software-as-a-service projects.

* Installation
  Copy or symlink =muaccounts/= subdirectory to Python path (=setup.py=
  script for automated installation will be supplied later on). Module
  contents are available in the =muaccounts= module.

  In order to use application, add =muaccounts= to INSTALLED_APPS in
  Django project =settings.py= file,
  =muaccounts.middleware.MUAccountsMiddleware= to MIDDLEWARE_CLASSES
  after =AuthenticationMiddleware=, and configure application settings
  described in the next section.
* Settings
  Following Django settings are read by the application:
  - =MUACCOUNTS_ACCOUNT_URLCONF= - if set, =request.urlconf= is set to
    this value when MUAccount's domain is accessed.  This breaks
    django-debug-toolbar and misleads reverse URL resolver (main
    urlconf is always used for reverse URL resolving).
  - =MUACCOUNTS_DEFAULT_DOMAIN= - Default domain name, on which "main"
    (non-user) site is hosted.  Used to prevent redirection to
    =MUACCOUNTS_DEFAULT_URL= when =MUAccountsMiddleware= is used both
    on accounts' sites and main site.  Also used to construct default
    value of =MUACCOUNTS_DEFAULT_URL= when it is not set.
  - =MUACCOUNTS_DEFAULT_URL= - URL to redirect to when user agent
    refers to site with an unknown domain (not registered in any of
    accounts).  When not set, a URL is constructed from
    =MUACCOUNTS_DEFAULT_DOMAIN= or current Site object's domain and
    =MUACCOUNTS_PORT=.
  - =MUACCOUNTS_IP= - if set, value is used to verify custom domains
    in =MUAccountForm=.  It can be set to a string (literal
    'aa.bb.cc.dd' value that is compared to =sockets.gethostbyname()=
    result), or, for more complex deployments, it can be a function
    that will receive IP as returned by =sockets.gethostbyname()=
  - =MUACCOUNTS_PORT= - can be set to custom port that will be used in
    MUAccount site URLs.  This way, developer can successfully use
    MUAccounts on e.g. 127.0.0.1:8000.
  - =MUACCOUNTS_ROOT_DOMAIN= - root domain for subdomains (with or
    without leading dot).  Must be set.
  - =MUACCOUNTS_SUBDOMAIN_STOPWORDS= - tuple of regular expressions
    (http://docs.python.org/library/re.html) that cannot be used as
    subdomain names.  Default is =("^www$",)=.  Use this to stop users
    from e.g. using reserved domain names or using profanities as
    their domain name.  Expressions are tested using =re.search=, not
    =re.match=, so without using =^= anchor they can match anywhere in
    the domain name.
  - =MUACCOUNTS_THEMES= - a sequence of (codename, name) pairs
    indicating available themes for user sites.
* Models
  Application defines one model, =MUAccount=.  Model has three fields:
  - =owner=, OneToOneField reference to
    =django.contrib.auth.models.User= model, which holds user owning
    the account;
  - =members=, ManyToManyField reference to
    =django.contrib.auth.models.User= model, which holds account
    members;
  - =domain=, name of full domain or sub-domain of
    =MUACCOUNTS_ROOT_DOMAIN=;
  - =is_subdomain=, boolean, decides whether =domain= is full domain
    or just a subdomain;
  - =is_public=, boolean.  If True (default), MUAccountMiddleware will
    allow any =auth.User= to log in to MUAccount's account; if False,
    only users that are MUAccount members will be allowed;
  Class has one class attribute, =subdomain_root=, which contains root
  for subdomains as in =MUACCOUNTS_ROOT_DOMAIN= setting description,
  always with leading dot.  This attribute should not be written.

  Model defines =get_absolute_url()= method, which returns link to
  root path of configured domain (http://domain.root_domain/ if
  =is_subdomain=, http://domain/ otherwise).
** Permissions
   - =can_set_custom_domain= enables setting =is_subdomain= to =True=
     by the account owner.  If MUAccount owner does not have such
     permission, =account_detaul= view hides checkbox for
     =is_subdomain=, and on form validation =is_subdomain= field is
     unconditionally set to =True=;
   - =can_set_public_status= does the same for =is_public= field.
* Middleware
  =muaccounts.middleware.MUAccountsMiddleware= looks at
  =request.META['HTTP_HOST']= and, if it matches any =MUAccount= model
  instance:
  - sets =request.muaccount= to that instance (it can be later used by
    views and, with =request= context processor, in templates);
  - immediately logs out (and redirects to reverse URL lookup of
    =muaccounts_not_a_member=) any =auth.models.User= that is not this
    account's owner or memeber, unless =request.muaccount.is_public=
    is true;
  - if =MUACCOUNTS_ACCOUNT_URLCONF= setting is set, sets
    =request.urlconf= to its value, allowing single project to display
    different URL hierarchies for main site and account sites;

    *WARNING*: setting =request.urlconf= doesn't fit well with reverse
    URL lookups (those will still be made against root urlconf),
    django-debug-toolbar, and probably other things as well. For
    maximum reliability, consider running two separate projects on
    single database: one for "main" site, other for account domains,
    or use single urlconf for both;
  - send signal =muaccounts.signals.muaccount_request= and if any
    receiver returns an instance of =HttpResponse=, returns this
    response instead of actual page.  This can be used for
    e.g. displaying error message and not allowing to log into expired
    accounts.

  If current domain doesn't match any of existing MUAccount instances
  and is not =MUACCOUNT_DEFAULT_DOMAIN=, middleware redirects user to
  =MUACCOUNT_DEFAULT_DOMAIN=.
* Views
  - =muaccounts.views.account_detail= - displays using
    =muaccounts/account_detail.html= template and validates
    =muaccounts.forms.MUAccountForm= form, which enables user to
    configure account's domain.
  - =muaccounts.views.create_account= - if logged in user does not
    have a MUAccount, creates new one and redirect to =account_detail=
    view.

  Both views take one optional parameter, =return_to=, which can be
  used to specify URL to redirect user to after successfully changing
  account domain.  It defaults to reverse of
  =muaccounts_account_detail=.
* URLs
  In supplied urlconf, =muaccounts.urls=, one external URL is
  configured: root for =account_detail= view.  More URLs are
  configured for various POST actions.
* Templates
  Application in default setup needs two templates:
  - =muaccounts/account_detail.html= called by =account_detail= view.
    Receives two arguments:
    - =object= - edited MUAccount instance, and
    - =form= - MUAccountForm instance to display.
* Example code
  Example usage and templates are available as =django-saas-kit=
  project at http://github.com/CrowdSense/django-saas-kit/
* Bugs and omissions
  - There is no =setup.py= script for automated installation.
* License
  This project is dual-licensed on terms of MIT (MIT-LICENSE.txt) and
  GPL (GPL-LICENSE.txt) licenses.
